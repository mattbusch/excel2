{"ast":null,"code":"import dummyData from './DummyData';\nconst UserServices = {\n  inviteNewUser: function (userId, type) {\n    return null;\n  },\n  getStudents: function () {\n    return dummyData.users.filter(user => user.role && user.role == 'Student');\n  },\n  getInstructors: function () {\n    return dummyData.users.filter(user => user.role && user.role == 'Faculty/Staff');\n  },\n  sendResetPasswordLink: function (userEmail) {\n    return null;\n  },\n  getMentors: function () {\n    return dummyData.users.filter(user => user.role && user.role == 'Mentor');\n  },\n  assignMentor: function (studentEmail, mentorEmail) {\n    return null;\n  },\n\n  getTrackingLocations() {\n    return dummyData.trackingLocations;\n  },\n\n  getCompetencies() {\n    return dummyData.competencies;\n  },\n\n  deleteStudent(studentEmail) {\n    return null;\n  },\n\n  getMentor(studentEmail) {\n    let student = dummyData.users.filter(user => user.email == studentEmail);\n    console.log(\"GOODBYE\", student);\n    return student[0].mentor;\n  },\n\n  unassignMentor(studentEmail) {\n    return null;\n  },\n\n  searchTrackingLocations(search) {\n    return dummyData.trackingLocations.filter(trackingLocation => trackingLocation.name.toLowerCase().includes(search.toLowerCase()) || search == '');\n  },\n\n  searchCompetencies(search) {\n    return dummyData.competencies.filter(competency => competency.title.toLowerCase().includes(search.toLowerCase()) || search == '');\n  },\n\n  getTrackingLocation(tlid) {\n    return dummyData.trackingLocations.filter(trackingLocation => trackingLocation.locationID == tlid);\n  },\n\n  createTrackingLocation(name) {\n    return null;\n  },\n\n  addCompToTL(compId, track) {\n    console.log(compId);\n    return null;\n  },\n\n  addStudentToTL(studentEmail, track) {\n    console.log(studentEmail);\n    return null;\n  },\n\n  addInstructorToTL(instructorEmail, track) {\n    console.log(instructorEmail);\n    return null;\n  },\n\n  getInstructor(emails) {\n    return dummyData.users.filter(user => emails.includes(user.email));\n  },\n\n  tlToCompetency(cids) {\n    return dummyData.competencies.filter(competency => cids.includes(competency.id));\n  },\n\n  getUsers(email) {\n    return dummyData.users.filter(user => email == user.email)[0];\n  }\n\n};\nexport default UserServices;","map":{"version":3,"sources":["/home/dev/excel-tracker/excel-tracker-application/src/services/UserServices.js"],"names":["dummyData","UserServices","inviteNewUser","userId","type","getStudents","users","filter","user","role","getInstructors","sendResetPasswordLink","userEmail","getMentors","assignMentor","studentEmail","mentorEmail","getTrackingLocations","trackingLocations","getCompetencies","competencies","deleteStudent","getMentor","student","email","console","log","mentor","unassignMentor","searchTrackingLocations","search","trackingLocation","name","toLowerCase","includes","searchCompetencies","competency","title","getTrackingLocation","tlid","locationID","createTrackingLocation","addCompToTL","compId","track","addStudentToTL","addInstructorToTL","instructorEmail","getInstructor","emails","tlToCompetency","cids","id","getUsers"],"mappings":"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","sourcesContent":["import dummyData from './DummyData'\n\n\nconst UserServices = {\n  inviteNewUser: function(userId, type) {\n    return null;\n  },\n\n  getStudents: function() {\n    return dummyData.users.filter((user) => (user.role && user.role == 'Student'))\n  },\n\n  getInstructors: function() {\n    return dummyData.users.filter((user) => (user.role && user.role == 'Faculty/Staff'))\n  },\n\n  sendResetPasswordLink: function(userEmail) {\n    return null;\n  },\n\n  getMentors: function() {\n    return dummyData.users.filter((user) => (user.role && user.role == 'Mentor'))\n  },\n\n  assignMentor: function(studentEmail, mentorEmail) {\n    return null\n  },\n\n  getTrackingLocations() {\n    return dummyData.trackingLocations\n  },\n\n  getCompetencies() {\n    return dummyData.competencies\n  },\n\n  deleteStudent(studentEmail) {\n    return null;\n  },\n\n  getMentor(studentEmail) {\n    let student = dummyData.users.filter((user) => user.email == studentEmail);\n    console.log(\"GOODBYE\", student)\n    return student[0].mentor;\n  },\n\n  unassignMentor(studentEmail) {\n    return null\n  },\n\n  searchTrackingLocations(search) {\n    return dummyData.trackingLocations.filter((trackingLocation) => (trackingLocation.name.toLowerCase().includes(search.toLowerCase()))||search =='') \n  },\n\n  searchCompetencies(search) {\n    return dummyData.competencies.filter((competency) => (competency.title.toLowerCase().includes(search.toLowerCase()))||search =='') \n  },\n\n  getTrackingLocation(tlid) {\n    return dummyData.trackingLocations.filter((trackingLocation) => (trackingLocation.locationID == tlid))\n  },\n\n  createTrackingLocation(name) {\n    return null\n  },\n\n  addCompToTL(compId, track) {\n    console.log(compId)\n    return null\n  },\n\n  addStudentToTL(studentEmail, track) {\n    console.log(studentEmail)\n    return null\n  },\n\n  addInstructorToTL(instructorEmail, track) {\n    console.log(instructorEmail)\n    return null\n  },\n\n  getInstructor(emails) {\n    return dummyData.users.filter((user) => emails.includes(user.email))\n  }, \n  tlToCompetency(cids) {\n    return dummyData.competencies.filter((competency) => cids.includes(competency.id))\n  },\n  getUsers(email) {\n    return dummyData.users.filter((user) => email == (user.email))[0]\n  }, \n}\n\nexport default UserServices;"]},"metadata":{},"sourceType":"module"}